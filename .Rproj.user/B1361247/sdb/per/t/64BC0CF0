{
    "contents" : "\n##################################################################\n#' interZoneC\n#'\n#' @details description, a paragraph\n#' @param Z xxxx\n#' @param iC xxxx\n#' @param iZC xxxx\n#' @param closePt xxxx\n#'\n#' @return a ?\n#' @importFrom rgeos gBoundary gCrosses gEnvelope gIntersection gLength\n#'\n#' @export\n#'\n#' @examples\n#' # not run\ninterZoneC=function(Z,iC, iZC, closePt)\n##################################################################\n{\n# returns spatialpoints = 2 points for junction of zones iC and iZC\n#  iC (current zone) and iZC (close zone)\nif (is.null(closePt)) return(NULL) #protection\n\n# coordinates of close zone\nb2=gBoundary(Z[[iZC]])\nco1 = Z[[iC]]@polygons[[1]]@Polygons[[1]]@coords\nco2sp = SpatialPoints(Z[[iZC]]@polygons[[1]]@Polygons[[1]]@coords)\nend = TRUE\n# draw circle with closePt as center and radius chosen so that it will intersect\n\n  x = closePt$x\n  y = closePt$y\n  n = 100\n\n  r= 0.75*max (dist(co1))\n  pts = seq(0, 2 * pi, length.out = n)\n  xy = cbind(x + r * sin(pts), y + r * cos(pts))\n  circle= SpatialLines(list(Lines(list(Line(xy)), \"line\")))\n  #lines(circle)\n\n# intersect circle with close zone\n  pInter = gIntersection(circle,b2)\n\n  spi = NULL\n  ord=NULL\n  if (!is.null(pInter) & length(pInter)>=2)\n  {\n\n\t# find  intersection pts\n\ti1=which.min(gDistance(pInter[1],co2sp,byid=TRUE))\n  \ti2=which.min(gDistance(pInter[2],co2sp,byid=TRUE))\n\n  \t#transform into Spatial Points\n  \tspi= co2sp[c(i1,i2),]\n\t# order of points\n\tif (i1 <i2){\n    \tord = (i1+1):(i2-1)\n    \tend = FALSE\n\t}\n \t else\n  \t {\n    \t ord = (i2+1):(i1-1)\n  \t }\n\t #\n  nbcoord = length(co2sp)\n  if (length(ord) >nbcoord/2)\n  {\n    if (!end)\n    {\n      ord = c((i2+1):(nbcoord),1:(i1-1))\n    }\n    else\n    {\n      ord = c((i1+1):(nbcoord),1:(i2-1))\n    }\n  }\n  }\nreturn(list(spi=spi,ord=ord))\n}\n##################################################################\n#' getZoneId\n#'\n#' @details description, a paragraph\n#' @param zone xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#'\n#' @examples\n#' # not run\ngetZoneId=function(zone)\n##################################################################\n{\n\tid=zone@polygons[[1]]@ID\n\treturn(id)\n}\n\n###########################################################################\n#' Identify\n#'\n#' @details description, a paragraph\n#' @param id xxxx\n#' @param Z xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#'\n#' @examples\n#' # not run\nIdentify=function(id,Z)\n###########################################################################\n{\n#returns the zone number corresponding to the id given in argument\n#returns 0 if no id\n  for (i in (1:length(Z)))\n  {\n    if (Z[[i]]@polygons[[1]]@ID == id) return(i)\n  }\n  return(0)\n}\n\n##################################################################\n#' getId\n#'\n#' @details description, a paragraph\n#' @param Z xxxx\n#' @param iZ xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#'\n#' @examples\n#' # not run\ngetId=function(Z,iZ)\n##################################################################\n{\n\tid = Z[[iZ]]@polygons[[1]]@ID\n\treturn(id)\n}\n##################################################################\n#' findNumZ\n#'\n#' @details description, a paragraph\n#' @param Z xxxx\n#' @param id xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#'\n#' @examples\n#' # not run\nfindNumZ=function(Z,id)\n##################################################################\n{\n\tids=getIds(Z)\n\tnum=which(ids==id)\n\treturn(num[1])\n}\n\n##################################################################\n#' getIds\n#'\n#' @details description, a paragraph\n#' @param Z xxxx\n#' @param nums xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#'\n#' @examples\n#' # not run\ngetIds=function(Z,nums=NULL)\n##################################################################\n{\n\tids=c()\n\tif (is.null(nums))\n\t   iZZ = 1:length(Z)\n\telse\n\t   iZZ = nums\n\tfor (iZ in iZZ)\n\t{\n\t\tids = c(ids,Z[[iZ]]@polygons[[1]]@ID)\n\t}\n\treturn(ids)\n}\n\n##################################################################\n#' setId\n#'\n#' @details description, a paragraph\n#' @param Z xxxx\n#' @param iZ xxxx\n#' @param id xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#'\n#' @examples\n#' # not run\nsetId=function(Z,iZ,id)\n##################################################################\n{\n\tZ[[iZ]]@polygons[[1]]@ID = as.character(id)\n\treturn(Z)\n}\n\n##################################################################\n#' setIds\n#'\n#' @details description, a paragraph\n#' @param Z xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#'\n#' @examples\n#' # not run\nsetIds=function(Z)\n##################################################################\n{\n\tfor (iZ in 1:length(Z))\n\t{\n\t\tZ[[iZ]]@polygons[[1]]@ID = as.character(iZ)\n\t}\n\treturn(Z)\n}\n\n##################################################################\n#' maxId\n#'\n#' @details description, a paragraph\n#' @param Z xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#'\n#' @examples\n#' # not run\nmaxId=function(Z)\n##################################################################\n{\n\tm=as.numeric(getId(Z,1))\n\tif (length(Z)<2) return(m)\n\tfor (iZ in 2:length(Z))\n\t{\n\t\tid=as.numeric(getId(Z,iZ))\n\t\tif (id >m) m=id\n\t}\n\treturn(as.numeric(m))\n}\n\n##################################################################\n#' getSurf\n#'\n#' @details description, a paragraph\n#' @param Z xxxx\n#' @param iZ xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#'\n#' @examples\n#' # not run\ngetSurf=function(Z,iZ)\n##################################################################\n{\n\treturn(Z[[iZ]]@polygons[[1]]@Polygons[[1]]@area)\n}\n\n##################################################################\n#' printZsurf\n#'\n#' @details description, a paragraph\n#' @param Z xxxx\n#' @param minSize xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#'\n#' @examples\n#' # not run\nprintZsurf=function(Z,minSize=0.012)\n##################################################################\n{\n\tsmallZ=c()\n\tgas=c()\n\tfor ( iZ in 1:length(Z))\n\t{\n\tga=gArea(Z[[iZ]])\n\tif(ga>=minSize)\n\t\tprint(paste(\"iZ=\",iZ,\"area=\",round(gArea(Z[[iZ]]),5)))\n\telse\n\t\t{\n\t\tprint(paste(\"iZ=\",iZ,\" area=\",round(gArea(Z[[iZ]]),5),\" < minSize(\",minSize,\")\",sep=\"\"))\n\t\tsmallZ=c(smallZ,iZ)\n\t\tgas=c(gas,ga)\n\t\t}\n\t}\nreturn(smallZ[order(gas)])\n}\n\n############################\n#' getNumZone\n#'\n#' @details description, a paragraph\n#' @param ptsp xxxx\n#' @param Z xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#'\n#' @examples\n#' # not run\ngetNumZone=function(ptsp,Z)\n############################\n{\n# ptssp SpatialPointsDataframe\n# Z zoning (list of SpatialPolygons)\n# ptsp=map$krigData\n#\nnumzone=rep(0,length(ptsp$x))\nfor (k in 1:length(Z))\n    {\n\tres=getPtsZone(ptsp,Z[[k]])\n\tmask=res$mask\n\tnumzone[mask]=k\n    }\nreturn(numzone)\n}\n\n##################################################################\n#' printZid\n#'\n#' @details description, a paragraph\n#' @param Z xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#'\n#' @examples\n#' # not run\nprintZid = function(Z)\n##################################################################\n{\n\tfor (ii in 1:length(Z))\n\t{\n\t\tprint(paste(\"ii=\",ii,\" ID=\", Z[[ii]]@polygons[[1]]@ID))\n\t}\n}\n\n##################################################################\n#' crComment\n#'\n#' @details description, a paragraph\n#' @param Z xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#'\n#' @examples\n#' # not run\ncrComment = function(Z)\n##################################################################\n{\n# create comments for holes\n      if (!is.null(Z) & length(Z) >0)\n      {\n\tfor (iZ in 1:length(Z))\n\t    {\n\t\tcomment(Z[[iZ]]@polygons[[1]])=createPolygonsComment(Z[[iZ]]@polygons[[1]])\n\t     }\n\n      }\n      return(Z)\n}\n\n##################################################################\n#' testInterSpe\n#'\n#' @details description, a paragraph\n#' @param Z xxxx\n#' @param i1 xxxx\n#' @param i2 xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#'\n#' @examples\n#' # not run\ntestInterSpe=function(Z,i1,i2)\n##################################################################\n# returns TRUE if zones Z[[i1]] and Z[[i2]] share some common part\n# but are not within each other\n{\n#if(gOverlaps(Z[[i1]],Z[[i2]]))\nif(gCrosses(Z[[i1]],Z[[i2]])) #problematic sometimes\n\treturn(TRUE)\nelse\n\treturn(FALSE)\n}\n\n##################################################################\n#' testInterSpeZ1\n#'\n#' @details description, a paragraph\n#' @param Z xxxx\n#' @param i1 xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#'\n#' @examples\n#' # not run\ntestInterSpeZ1=function(Z,i1)\n##################################################################\n#returns TRUE if zone Z[[i1]] intersects with any other zone  not within it\n{\n\tinter=FALSE\n  \tjj=1\n  \twhile(!inter && (jj<=length(Z)))\n  \t{\n\t\tinter=testInterSpe(Z,i1,jj)\n\t\tjj=jj+1\n  \t\t}\n\n\treturn(inter)\n}\n\n##################################################################\n#' testInterSpeZ\n#'\n#' @details description, a paragraph\n#' @param Z xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#'\n#' @examples\n#' # not run\ntestInterSpeZ=function(Z)\n##################################################################\n#returns TRUE if any zone intersects with any other zone  not within it\n{\n\tinter=FALSE\n\ti1=1\n\twhile(!inter && (i1<=length(Z)))\n\t{\n\t\tinter=testInterSpeZ1(Z,i1)\n\t\ti1=i1+1\n\t}\n\treturn(inter)\n}\n\n##################################################################\n#' findNptInZone\n#'\n#' @details description, a paragraph\n#' @param Z xxxx\n#' @param K xxxx\n#' @param i1 xxxx\n#' @param i2 xxxx\n#' @param map xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#'\n#' @examples\n#' # not run\nfindNptInZone=function(Z,K,i1,i2,map)\n##################################################################\n{\nptZ1=K$listZonePoint[[i1]]\nptZ2=K$listZonePoint[[i2]]\nptN=map$krigN\n#\n# for each pt in Z1\nmat=c()\nfor (ptnum in ptZ1)\n{\n# look for neighbor pt in Z2\nnei=map$krigN[[ptnum]]\nk=match(nei,ptZ2)\nn2=ptZ2[k[!is.na(k)]]\nif(length(n2)>0) mat=rbind(mat,c(ptnum,n2))\n}\ncolnames(mat)=c(\"ptZ1\",\"ptNZ2\")\nreturn(mat)\n}\n",
    "created" : 1493891123623.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1957180388",
    "id" : "64BC0CF0",
    "lastKnownWriteTime" : 1493891170,
    "path" : "~/Documents/Mes documents/Geozoning/geozoning/R/utilZ.R",
    "project_path" : "R/utilZ.R",
    "properties" : {
    },
    "relative_order" : 14,
    "source_on_save" : false,
    "type" : "r_source"
}