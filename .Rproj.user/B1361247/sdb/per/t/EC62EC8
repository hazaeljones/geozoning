{
    "contents" : "######################################################################\n#' calNei\n#'\n#' @details description, a paragraph\n#' @param Z xxxx\n#' @param data xxxx\n#' @param surfVoronoi xxxx\n#' @param ptN xxxx\n#' @param simplitol xxxx\n#' @param remove xxxx\n#' @param correct xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#' @importFrom sp point.in.polygon\n#'\n#' @examples\n#' # not run\ncalNei=function(Z,data,surfVoronoi,ptN,simplitol,remove=TRUE,correct=FALSE)\n######################################################################\n{\n  nbZ=length(Z)\n\n  #list of pts in zones\n  listZonePoint=zoneAssign(data,Z)\n\n  #determine zone neighbors\n  zoneN=matrix(logical(nbZ^2),nbZ,nbZ)\n  vZ=calZoneN(ptN,zoneN,listZonePoint)\n  zoneN = vZ$zoneN\n\n  # remove zones with #pts <= n  from zoning Z or surf<minSizeNG\n  if(remove)\n\t{\n\tres=removeFromZ(Z,zoneN,ptN,listZonePoint,data,simplitol,n=1)\n\tZ=res$Z\n\tzoneN=res$zoneN\n\tlistZonePoint=res$listZonePoint\n\t}\n\n  # correct zone neighbors\n  # confusion when voronoi are close - so check again zone distance\n  if(correct) voisinZone = correctN(Z,zoneN)\n  #\n  zoneNModif = zoneN\n  diag(zoneNModif) = FALSE\n  #\n  meanTot=sum(data[[1]]*surfVoronoi)/sum(surfVoronoi)\n  listSurf=sapply(Z,gArea)\n  # compute (surface/perim^2)\n  listPerim=sapply(Z,gLength)\n  critSurf=listSurf/(listPerim^2)\n\n  #zone mean values (each pt ponderated by its Voronoi surface)\n  meanZone=wMean(2,listZonePoint,surfVoronoi,data)\n\n  return(list(data=data,zoneN=zoneN,zoneNModif=zoneNModif,listZonePoint=listZonePoint,meanTot=meanTot,\n              critSurf=critSurf,meanZone=meanZone,listSurf=listSurf,zonePolygone=Z))\n }\n\n\n#########################################\n#' labZone\n#'\n#' @details description, a paragraph\n#' @param listK xxxx\n#' @param qProb xxxx\n#' @param matVal xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#' @importFrom sp point.in.polygon\n#'\n#' @examples\n#' # not run\nlabZone=function(listK,qProb,matVal)\n#########################################\n  {\n#create labels\n    # input is zoning from calNei, quantile vector and data values\n    # output has lab\n  lab = rep(1,length(listK$zonePolygone))\n  q1= quantile(matVal,na.rm=TRUE,prob=qProb)\n\n  for (i in 1:length(listK$zonePolygone))\n  {\n    for (j in 1:length(q1))\n    {\n      if (listK$meanZone[i]>(q1[j]+0.1))\n      {\n        lab[i]=j+1\n      }\n\n    }\n  }\nlistK$lab=lab\nlistK$qProb=qProb\nreturn(listK)\n}\n\n######################################\n#' correctN\n#'\n#' @details description, a paragraph\n#' @param Z xxxx\n#' @param zoneN xxxx\n#'\n#' @return a ?\n#'\n#' @export\n#' @importFrom sp point.in.polygon\n#'\n#' @examples\n#' # not run\ncorrectN = function(Z,zoneN)\n######################################\n{\n# confusion when voronoi are close -> false neighborhood\n# so check again zone distance\n# computationally costly - obsolete\n# correct pt neighborhood instead (done in voronoiPolygons)\n\nif (length(Z)>=2)\n  {\n    for (j in 1:(length(Z)-1))\n    {\n      for (k in (j+1):length(Z))\n      {\n      \ta=gDistance(Z[[j]],Z[[k]])\n  \tif(a >0.001)\n      \t zoneN[j,k]=zoneN[k,j]=FALSE\n  \t } #end k loop\n      }#end j loop\n    } # end test more than one zone\nreturn(zoneN)\n}\n",
    "created" : 1493885043579.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3159219368",
    "id" : "EC62EC8",
    "lastKnownWriteTime" : 1493887017,
    "path" : "~/Documents/Mes documents/Geozoning/geozoning/R/calNei.R",
    "project_path" : "R/calNei.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "type" : "r_source"
}