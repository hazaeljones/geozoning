library(roxygen2)
roxygen2::roxygenise()
install.packages(c("mmand", "permute", "optimx", "profvis"))
library(geozoning)
devtools::use_vignette("crit1zoning")
Sys.Date()
load("~/Documents/Mes documents/Geozoning/GEOZONING/Z.Rdata")
mapTest<-map
resZTest<-resZ
ZPSTest<-ZPS
devtools::use_data(mapTest)
devtools::use_data(resZTest)
devtools::use_data(ZPSTest)
NBZ
roxygen2::roxygenise()
library(geozoning)
ZPSTest
library(geozoning)
library(geozoning)
library(geozoning)
sessionInfo()
library(geozoning)
library(geozoning)
library(geozoning)
library(geozoning)
library(geozoning)
library(geozoning)
library(roxygen2)
roxygenise()
library(geozoning)
library(geozoning)
library(geozoning)
library(geozoning)
devtools::build_vignettes()
data("ZPSTest")
str(ZPSTest)
data("resZTest")
str(resZTest)
library(geozoning)
DataCsv = read.table("./DATA/yield.csv",sep=",",header = TRUE)
DataCsv = read.table("/home/sanchezi/Documents/Mes documents/Geozoning/GEOZONING/DATA/yield.csv",sep=",",header = TRUE)
colnames(DataCsv)=c("x","y","Yield")
devtools::use_data(pkg="/home/sanchezi/Documents/Mes documents/Geozoning/geozoning",DataCsv,overwrite = TRUE)
yield = read.table("/home/sanchezi/Documents/Mes documents/Geozoning/GEOZONING/DATA/yield.csv",sep=",",header = TRUE)
colnames(yield)=c("x","y","Yield")
devtools::use_data(pkg="/home/sanchezi/Documents/Mes documents/Geozoning/geozoning",yield,overwrite = TRUE)
library(geozoning)
library(geozoning)
library(geozoning)
devtools::use_vignette(zoningYield)
devtools::use_vignette("zoningYield.Rmd")
devtools::use_vignette("zoningYield")
library(geozoning)
data(yield)
plot(x=yield$x, y=yield$y)
# draw manual boundary
boundary0=list()
boundary0$x=c(7723128,7723223,7723283,7723376,7723430,7723453,7723605,7723713,7723699,7723638,7723696,7723707,
7723562,7723531,7723494,7723459,7723344,7723356,7723221,7723158,7723129)
boundary0$y=c(3576538,3576438,3576432,3576396,3576386,3576388,3576776,3577000,3577054,3577104,3577175,3577202,
3577389,3577388,3577455,3577445,3577211,3577151,3576860,3576697,3576547)
boundary0$x[length(boundary0$x)]=boundary0$x[1]
boundary0$y[length(boundary0$y)]=boundary0$y[1]
# plot data
qplot(x=yield$x, y=yield$y, data=yield, colour=yield[,3])
plot(x=yield$x, y=yield$y)
lines(boundary0$x,boundary0$y,col="red")
library(ggplot2)
qplot(x=yield$x, y=yield$y, data=yield, colour=yield[,3])
plot(x=yield$x, y=yield$y)
lines(boundary0$x,boundary0$y,col="red")
ggplot(data=yield,aes(x=x,y=y,colour=Yield))
ggplot(data=yield,aes(x=x,y=y,colour=Yield))
ggplot(data=yield,aes(x=x,y=y,colour=Yield)) + goem_point()
ggplot(data=yield,aes(x=x,y=y,colour=Yield)) + geom_point()
qplot(x=yield$x, y=yield$y, data=yield, colour=yield[,3])
ggplot(data=yield,aes(x=x,y=y,colour=Yield)) + geom_point() +
geom_line(data=boundary0, aes(x=x,y=y),col="red")
boundary1<-cbind.data.frame(boundary0$x,boundary0$y)
colnames(boundary1)<-c("x","y")
ggplot(data=yield,aes(x=x,y=y,colour=Yield)) + geom_point() +
geom_line(data=boundary1, aes(x=x,y=y),col="red")
resNorm = datanorm(yield, boundary0)
if (is.null(resNorm)) print("error in coordinates")
yieldN = resNorm$dataN
boundaryN = resNorm$boundaryN
xmin=resNorm$xmin
xmax=resNorm$xmax
ymin=resNorm$ymin
ymax=resNorm$ymax
#plot normalized data
plot(x=yieldN$x, y=yieldN$y)
lines(boundaryN$x,boundaryN$y,col="red")
map=genMapR(yieldN,seed=0,boundary=boundaryN,disp=0,nPointsK=7000)
library(geozoning)
map=genMapR(yieldN,seed=0,boundary=boundaryN,disp=0,nPointsK=7000)
boundary=map$boundary
resT=normSize(boundaryN,minSize,minSizeNG)
minSize = 0.012 # valid zone surface threshold - initial step
minSizeNG= 1e-3 #threshold for both no grow and zone grow acceptance (checkContour)
resT=normSize(boundaryN,minSize,minSizeNG)
minSize=resT$minSize
minSizeNG=resT$minSizeNG
library(geozoning)
shape1<-geozoning::shape1
p = shape1@polygons
sp=list()
library(geozoning)
library(ggplot2)
minSize = 0.012 # valid zone surface threshold - initial step
minSizeNG= 1e-3 #threshold for both no grow and zone grow acceptance (checkContour)
for (k in 1:length(p))
{
sp[[k]] = (p[[k]]@Polygons)[[1]]
co=coordinates(sp[[k]])
co[,1]=(co[,1]-xmin)/(xmax-xmin)
co[,2]=(co[,2]-ymin)/(ymax-ymin)
sp[[k]]@coords=co
sp[[k]] = polyToSp2(sp[[k]])
}
library(sp)
sp=list()
for (k in 1:length(p))
{
sp[[k]] = (p[[k]]@Polygons)[[1]]
co=coordinates(sp[[k]])
co[,1]=(co[,1]-xmin)/(xmax-xmin)
co[,2]=(co[,2]-ymin)/(ymax-ymin)
sp[[k]]@coords=co
sp[[k]] = polyToSp2(sp[[k]])
}
library(geozoning)
library(ggplot2)
library(sp)
minSize = 0.012 # valid zone surface threshold - initial step
minSizeNG= 1e-3 #threshold for both no grow and zone grow acceptance (checkContour)
data(yield)
plot(x=yield$x, y=yield$y)
boundary0=list()
boundary0$x=c(7723128,7723223,7723283,7723376,7723430,7723453,7723605,7723713,7723699,7723638,7723696,7723707,
7723562,7723531,7723494,7723459,7723344,7723356,7723221,7723158,7723129)
boundary0$y=c(3576538,3576438,3576432,3576396,3576386,3576388,3576776,3577000,3577054,3577104,3577175,3577202,
3577389,3577388,3577455,3577445,3577211,3577151,3576860,3576697,3576547)
boundary0$x[length(boundary0$x)]=boundary0$x[1]
boundary0$y[length(boundary0$y)]=boundary0$y[1]
boundary1<-cbind.data.frame(boundary0$x,boundary0$y)
colnames(boundary1)<-c("x","y")
# plot data
ggplot(data=yield,aes(x=x,y=y,colour=Yield)) + geom_point() #+
#geom_line(data=boundary1, aes(x=x,y=y),col="red")
plot(x=yield$x, y=yield$y)
lines(boundary0$x,boundary0$y,col="red")
resNorm = datanorm(yield, boundary0)
if (is.null(resNorm)) print("error in coordinates")
yieldN = resNorm$dataN
boundaryN = resNorm$boundaryN
xmin=resNorm$xmin
xmax=resNorm$xmax
ymin=resNorm$ymin
ymax=resNorm$ymax
map=genMapR(yieldN,seed=0,boundary=boundaryN,disp=0,nPointsK=7000)
boundary=map$boundary
# transform minSize as a percentage of frame
# compute frame area
resT=normSize(boundaryN,minSize,minSizeNG)
minSize=resT$minSize
minSizeNG=resT$minSizeNG
shape1<-geozoning::shape1
#obtention of coords
p = shape1@polygons
sp=list()
for (k in 1:length(p))
{
sp[[k]] = (p[[k]]@Polygons)[[1]]
co=coordinates(sp[[k]])
co[,1]=(co[,1]-xmin)/(xmax-xmin)
co[,2]=(co[,2]-ymin)/(ymax-ymin)
sp[[k]]@coords=co
sp[[k]] = polyToSp2(sp[[k]])
}
NZ=length(sp)
for (iZ in 1:NZ)
{
sp=setId(sp,iZ,iZ)
}
K =calNei(sp,map$krigData,map$krigSurfVoronoi,map$krigN,simplitol=simplitol)
Z =K$zonePolygone
nZ=length(Z)
dispZ(map$step,map$krigGrid,zonePolygone=Z,K=K,boundary=map$boundary,nbLvl=0)
devtools::build_vignettes("zoningYield")
devtools::build_vignettes("zoningYield.Rmd")
devtools::build_vignettes(zoningYield)
devtools::build_vignettes()
library(geozoning)
devtools::build_vignettes()
library(geozoning)
library(geozoning)
